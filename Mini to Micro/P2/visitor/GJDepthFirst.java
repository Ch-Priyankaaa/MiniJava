 //
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/** 
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   HashMap<String,String> for_param = new HashMap<String,String>();
   class ExpReturn {
      String type;
      int temp_num;

      ExpReturn() {
         type = null;
         temp_num = 0;
      }
   }

   class Met {
      String ret_type ;
      HashMap<String,String> param;

      Met() {
         ret_type = null;
         param = new HashMap<String,String>();
      }
   }

   String currentClass = null;
   String currentMethod = null;
   HashMap<String, String> class_parent = new HashMap<String, String>();
   Vector<String> class_list = new Vector<String>();
   HashMap <String,Vector> class_var = new HashMap<String, Vector>();
   HashMap<String, HashMap<String,Integer>> var_off = new HashMap<String, HashMap<String,Integer>>();
   HashMap<String, HashMap<String,Integer>> func_off = new HashMap<String, HashMap<String,Integer>>();
   HashMap <String,Vector> class_func = new HashMap<String, Vector>();
   HashMap<String, HashMap<String, String>> class_fin_var = new HashMap<String,HashMap<String,String>>();
   HashMap<String, HashMap<String, String>> met_fin_return = new HashMap<String,HashMap<String,String>>();
   HashMap<String, HashMap<String,Met>> class_met = new HashMap<String, HashMap<String,Met>>();
   HashMap<String, HashMap<String, HashMap<String, String >>> met_fin = new HashMap<String, HashMap<String, HashMap<String, String>>>();
   HashMap<String, HashMap<String, HashMap<String, String >>> met_fin_var = new HashMap<String, HashMap<String, HashMap<String, String>>>();
   HashMap<String,Integer> param_temp_num = new HashMap<String,Integer>();
   HashMap<String,Integer> var_temp_num = new HashMap<String,Integer>();
   int flag = 0;
   int pass = 1;
   int constants = 4000;
   int expr = 6000;
   int label = 1;
   int as_off = 0;
   int as_off2 = 0;
   int currentTemp = 40;
   int classTemp = 0;

	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;

         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   public void printVar() {
      
      System.out.println("The Var table is******************************************************");
      //System.out.println(class_list.size());
      
      Iterator<Map.Entry<String, Vector>> itr = class_var.entrySet().iterator();
   
      Map.Entry<String, Vector> entry = null;
      while(itr.hasNext()){
         entry = itr.next();
         System.out.println( "Class : " + entry.getKey());
         Enumeration enu = entry.getValue().elements();
         while(enu.hasMoreElements()) {
            System.out.println(enu.nextElement());
         }
      }

      System.out.println("The Method Table is ****************************");
      Iterator<Map.Entry<String, Vector>> itr2 = class_func.entrySet().iterator();
   
      Map.Entry<String, Vector> entry2 = null;
      while(itr2.hasNext()){
         entry2 = itr2.next();
         System.out.println( "Class : " + entry2.getKey());
         Enumeration enu = entry2.getValue().elements();
         while(enu.hasMoreElements()) {
            System.out.println(enu.nextElement());
         }
      }
   }

   public void InheritanceHandle() {
      Enumeration enu = class_list.elements();
         while(enu.hasMoreElements()) {
            String CN = (String) enu.nextElement();
            addFun(CN, CN);
         }
   }

   public void addFun(String c, String a) {
      if(class_parent.get(c) == null) return;
      else {
         Vector<String> parent_func = class_func.get(class_parent.get(c));
         Vector<String> temp = class_func.remove(a);
         Enumeration enu = parent_func.elements();
         int off_till = func_off.get(a).size();
         HashMap<String,Integer> temp_off = func_off.remove(a);
         while(enu.hasMoreElements()){
            String tba = (String) enu.nextElement();
            temp.add(tba);   
            temp_off.put(tba, 4*off_till);
            off_till ++;
         }
         func_off.put(a,temp_off);
         class_func.put(a, temp);

         Vector<String> parent_var = class_var.get((class_parent).get(c));
         Vector<String> temp_var = class_var.remove(a);
         Enumeration enu2 = parent_var.elements();
         int off_till_var = var_off.get(a).size();
         HashMap<String,Integer> temp_off_var = var_off.remove(a);
         while(enu2.hasMoreElements()){
            String tba = (String) enu2.nextElement();
            temp_var.add(tba);   
            temp_off_var.put(tba, 4*(off_till_var+1));
            off_till_var ++;
         }
         var_off.put(a,temp_off_var);
         class_var.put(a, temp_var);

         HashMap<String,String> class_v_type = class_fin_var.remove(a);
         HashMap<String,String> parent_v_type = class_fin_var.get(class_parent.get(c));
         class_v_type.putAll(parent_v_type);
         class_fin_var.put(a, class_v_type);

         addFun(class_parent.get(c), a);
      }
   }

   public int assignTempParam(Vector<String> pp) {
      param_temp_num.clear();
      Enumeration enu = pp.elements();
      int temp_n = 1;
      while(enu.hasMoreElements()) {
         String p_name = (String) enu.nextElement();
         param_temp_num.put(p_name,temp_n);
         temp_n ++;
      }
      return temp_n;
   }

   public void assignClassVarParam(Vector<String> pp, int ss) {
      var_temp_num.clear();
      Enumeration enu = pp.elements();
      while(enu.hasMoreElements()) {
         String p_name = (String) enu.nextElement();
         var_temp_num.put(p_name,ss);
         ss ++;
      }
   }

   public void printFuncOffsets() {
      Iterator<Map.Entry<String, HashMap<String,Integer>>> itr = func_off.entrySet().iterator();
   
      Map.Entry<String, HashMap<String,Integer>> entry = null;
      while(itr.hasNext()) {
         entry = itr.next();
         System.out.println("Class : " + entry.getKey());
         Iterator<Map.Entry<String,Integer>> itr2 = entry.getValue().entrySet().iterator();
         Map.Entry<String,Integer> entry2 = null;
         while(itr2.hasNext()){
            entry2 = itr2.next();
            System.out.println("Method : " + entry2.getKey() + " Offset : " + entry2.getValue());
         }
      }

      Iterator<Map.Entry<String, HashMap<String,Integer>>> itr3 = var_off.entrySet().iterator();
   
      Map.Entry<String, HashMap<String,Integer>> entry3 = null;
      while(itr3.hasNext()) {
         entry3 = itr3.next();
         System.out.println("Class : " + entry3.getKey());
         Iterator<Map.Entry<String,Integer>> itr4 = entry3.getValue().entrySet().iterator();
         Map.Entry<String,Integer> entry4 = null;
         while(itr4.hasNext()){
            entry4 = itr4.next();
            System.out.println("Var : " + entry4.getKey() + " Offset : " + entry4.getValue());
         }
      }
   }

   public void printTemp() {
      Iterator<Map.Entry<String, Integer>> itr2 = param_temp_num.entrySet().iterator();
   
      Map.Entry<String, Integer> entry2 = null;
      while(itr2.hasNext()){
         entry2 = itr2.next();
         System.out.println( "Param : " + entry2.getKey() + "  TEMP : " + entry2.getValue());
      }

      Iterator<Map.Entry<String, Integer>> itr3 = var_temp_num.entrySet().iterator();
   
      Map.Entry<String, Integer> entry3 = null;
      while(itr3.hasNext()){
         entry3 = itr3.next();
         System.out.println( "Var : " + entry3.getKey() + "  TEMP : " + entry3.getValue());
      }
   }


   public void printOffset() {
      Enumeration enu = class_list.elements();
      while(enu.hasMoreElements()) {
         String CN = (String) enu.nextElement();
         int func_table_off = class_func.get(CN).size();
         int var_off = class_var.get(CN).size();
         int total_off = (1 + var_off)*4;
         System.out.println("Class : " + CN);
         System.out.println("Total Off : " + Integer.toString(total_off));
         System.out.println("Function Off : " + Integer.toString(func_table_off*4));
         System.out.println();
         System.out.println();
      }
   }

   public void printVarOff() {
     Enumeration enu = class_list.elements();
      while(enu.hasMoreElements()) {
         String CN = (String) enu.nextElement();
         System.out.println("Class :  " + CN);
         HashMap<String,Integer> v_off = var_off.get(CN);
         System.out.println(v_off.size());
         Iterator<Map.Entry<String, Integer>> itr = v_off.entrySet().iterator();
   
         Map.Entry<String, Integer> entry = null;
         while(itr.hasNext()){
            entry = itr.next();
            System.out.println( "Var : " + entry.getKey() + "  Off : " + entry.getValue());
         }
      }
   }

   public void printMetRet() {
     Enumeration enu = class_list.elements();
      while(enu.hasMoreElements()) {
         String CN = (String) enu.nextElement();
         System.out.println("Class :  " + CN);
         HashMap<String,String> v_off = met_fin_return.get(CN);
         System.out.println(v_off.size());
         Iterator<Map.Entry<String, String>> itr = v_off.entrySet().iterator();
   
         Map.Entry<String, String> entry = null;
         while(itr.hasNext()){
            entry = itr.next();
            System.out.println( "Var : " + entry.getKey() + "  Off : " + entry.getValue());
         }
      }
   }

   public void printParam() {
      Enumeration enu = class_list.elements();
      while(enu.hasMoreElements()) {
         String CN =(String) enu.nextElement();
         System.out.println("Class : " + CN);
         HashMap<String, HashMap<String,String>> met_name = met_fin.get(CN);
         Iterator<Map.Entry<String, HashMap<String,String>>> itr = met_name.entrySet().iterator();
         Map.Entry<String, HashMap<String,String>> entry = null;
         while(itr.hasNext()){
            entry = itr.next();
            System.out.println("Method Name : " + entry.getKey());
            HashMap<String,String> met_param = entry.getValue();
            Iterator<Map.Entry<String,String>> itr2 = met_param.entrySet().iterator();
            Map.Entry<String, String> entry2 = null;
            while(itr2.hasNext()){
               entry2 = itr2.next();
               System.out.println("Param : " + entry2.getKey() + "  Type : " + entry2.getValue());
            }
         }
      }
   }



   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      
      InheritanceHandle();


      // printVarOff();
      // printOffset();
      // printVar();
      // printParam();
      // printMetRet();
      // printFuncOffsets();

      pass = 2;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);   
      }
      else {
         System.out.println("MAIN");
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
         System.out.println("END");
      }
      
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */
      R _ret=null;
      if(pass == 1){
         flag = 0;
         n.f0.accept(this, argu);
         String CN = (String) n.f1.accept(this, argu);
         class_list.add(CN);
         class_parent.put(CN,null);
         argu = (A) CN ;
         as_off = 0;
         as_off2 = 0;
         HashMap<String,Integer> temp_var = new HashMap<String,Integer>();
         HashMap<String,Integer> func_var = new HashMap<String,Integer>();
         Vector<String> var = new Vector<String>();
         HashMap<String,String> var_types = new HashMap<String,String>();
         HashMap<String,String> return_types = new HashMap<String,String>();
         HashMap<String,HashMap<String,String>> temp_func = new HashMap<String, HashMap<String, String>>();
         HashMap<String,HashMap<String,String>> temp_func2 = new HashMap<String, HashMap<String, String>>();
         met_fin.put(CN, temp_func);
         met_fin_var.put(CN, temp_func2);
         class_fin_var.put(CN, var_types);
         met_fin_return.put(CN, return_types);
         var_off.put(CN,temp_var);
         func_off.put(CN, func_var);
         class_var.put(CN, var);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         Vector<String> meth = new Vector<String>();
         class_func.put(CN, meth);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);   
      }
      else {
         n.f0.accept(this, argu);
         String CN = (String) n.f1.accept(this, argu);
         argu = (A) CN;
         currentClass = CN;
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         currentClass = null;
      }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         flag = 0;
         as_off = 0;
         as_off2 = 0;
         n.f0.accept(this, argu);
         String CN = (String) n.f1.accept(this, argu);
         class_list.add(CN);
         n.f2.accept(this, argu);
         argu = (A) CN;
         Vector<String> var = new Vector<String>();
         HashMap<String,Integer> temp_var = new HashMap<String,Integer>();
         HashMap<String,Integer> func_var = new HashMap<String,Integer>();
         HashMap<String,String> var_types = new HashMap<String,String>();
         HashMap<String,String> return_type = new HashMap<String,String>();
         HashMap<String,HashMap<String,String>> temp_func3 = new HashMap<String, HashMap<String, String>>();
         HashMap<String,HashMap<String,String>> temp_func4 = new HashMap<String, HashMap<String, String>>();
         met_fin.put(CN, temp_func3);
         met_fin_var.put(CN, temp_func4);
         class_fin_var.put(CN, var_types);
         met_fin_return.put(CN, return_type);
         class_var.put(CN, var);
         var_off.put(CN,temp_var);
         func_off.put(CN, func_var);
         String parent = (String)n.f3.accept(this, argu);
         class_parent.put(CN, parent);
         Vector<String> meth = new Vector<String>();
         class_func.put(CN, meth);
         HashMap<String,Integer> temp_func = new HashMap<String,Integer>();
         func_off.put(CN, temp_func);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
      }
      else {
         n.f0.accept(this, argu);
         String CN = (String) n.f1.accept(this, argu);
         argu = (A) CN;
         currentClass = CN;
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         currentClass = null;
      }
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         if(flag == 0) {
            String CN = (String) argu;
            Vector<String> var = class_var.remove(CN);
            HashMap<String, Integer> vo = var_off.remove(CN);
            HashMap<String,String> v_type = class_fin_var.remove(CN);
            String type = (String) n.f0.accept(this, argu);
            String var_n = (String) n.f1.accept(this, argu);
            v_type.put(var_n,type);
            class_fin_var.put(CN,v_type);
            vo.put(var_n,4*(++as_off));
            var.add(var_n);
            class_var.put(CN, var);
            var_off.put(CN,vo);
            n.f2.accept(this, argu);   
         }
         else{
            String type = (String)n.f0.accept(this, argu);
            String id = (String) n.f1.accept(this, argu);
            for_param.put(id,type);
            n.f2.accept(this, argu);
         }
      }
      else {
         n.f0.accept(this, argu);
         String var_name = (String) n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         parameters.add(var_name);
      }

         
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         flag = 1;
         String CN = (String)argu;
         n.f0.accept(this, argu);
         String return_type = (String) n.f1.accept(this, argu);
         String meth_name = (String) n.f2.accept(this, argu);
         Vector<String> meth_t = class_func.remove(CN);
         HashMap<String,Integer> func_t = func_off.remove(CN);
         HashMap<String, Met> func_det = class_met.remove(CN);
         HashMap<String,HashMap<String,String>> new_fun = met_fin.remove(CN);
         HashMap<String,String> new_param = new HashMap<String,String>();
         Met met = new Met();
         meth_name = CN + "_" + meth_name;
         meth_t.add(meth_name);
         func_t.put(meth_name, 4*(as_off2++));
         func_off.put(CN,func_t);
         class_func.put(CN, meth_t);
         for_param.clear();
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         new_param.putAll(for_param);
         new_fun.put(meth_name, new_param);
         met_fin.put(CN, new_fun);
         for_param.clear();
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         HashMap<String,String> new_var = new HashMap<String,String>();
         HashMap<String,HashMap<String,String>> new_fun2 = met_fin_var.remove(CN);
         n.f7.accept(this, argu);
         new_var.putAll(for_param);
         new_fun2.put(meth_name, new_var);
         met_fin_var.put(CN, new_fun2);
         for_param.clear();
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         HashMap<String,String> new_ret = met_fin_return.remove(CN);
         new_ret.put(meth_name, return_type);
         met_fin_return.put(CN, new_ret);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         flag = 0;  
      }
      else {
         String CN = (String) argu;
         n.f0.accept(this, argu);
         String return_type = (String) n.f1.accept(this, argu);
         String meth_name = (String) n.f2.accept(this, argu);
         meth_name = CN + "_" + meth_name;

         currentMethod = meth_name;
         int num_params = met_fin.get(CN).get(meth_name).size();
         System.out.println(meth_name + " [" + (num_params + 1) + "]");
         System.out.println("BEGIN"); 
         n.f3.accept(this, argu);
         parameters.clear();
         n.f4.accept(this, argu);
         int num_temps = assignTempParam(parameters);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         
         parameters.clear();
         // System.out.println(param_temp_num.size());
         n.f7.accept(this, argu);
         assignClassVarParam(parameters, num_temps);
         for(int i = 0; i<parameters.size(); i++) {
            System.out.println("MOVE TEMP " + (num_temps+i) + " 0");
         }
         //printTemp();
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         HashMap<String,String> new_ret = met_fin_return.remove(CN);
         new_ret.put(meth_name, return_type);
         met_fin_return.put(CN, new_ret);
         ExpReturn ret_exp = (ExpReturn) n.f10.accept(this, argu);
         System.out.println("RETURN TEMP " + ret_exp.temp_num);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         System.out.println("END");
         currentMethod = null;
      }
      
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      
      return _ret;
   }

   public Vector<String> parameters = new Vector<String>();

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         String type_param = (String) n.f0.accept(this, argu);
         String param_id = (String) n.f1.accept(this, argu);
         for_param.put(param_id,type_param);
      }
      else {
         n.f0.accept(this, argu);
         String param_name = (String) n.f1.accept(this, argu);
         parameters.add(param_name);
      }
      
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         _ret = (R) n.f0.accept(this, argu);
      }
      else {
         _ret = (R) n.f0.accept(this, argu);
      }
      
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R) "int[]";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */
      String CN = (String) argu;
      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         String id_ass = (String)n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      else {
         String id_ass = (String) n.f0.accept(this, argu);
         ExpReturn exp_ass = (ExpReturn) n.f2.accept(this, argu);
         if(var_temp_num.containsKey(id_ass)) {
            int var_temp_f = var_temp_num.get(id_ass);
            System.out.println("MOVE TEMP " + expr + " TEMP " + exp_ass.temp_num);
            System.out.println("MOVE TEMP " + var_temp_f + " TEMP " + expr);
            expr++;
         }
         else if(param_temp_num.containsKey(id_ass)) {
            int param_temp_f = param_temp_num.get(id_ass);
            System.out.println("MOVE TEMP " + expr + " TEMP " + exp_ass.temp_num);
            System.out.println("MOVE TEMP " + param_temp_f + " TEMP " + expr);
            expr++;
         }
         else {
            int class_var_temp = (var_off.get(CN)).get(id_ass);
            System.out.println("MOVE TEMP " + expr + " TEMP " + exp_ass.temp_num);
            System.out.println("HSTORE TEMP 0 " + class_var_temp + " TEMP " +expr);
            expr++;
         }
         
      }
      
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass ==1){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      else {
         
         int TT_num = 0;
         String id = (String) n.f0.accept(this, argu);
         if(var_temp_num.containsKey(id)) {
            TT_num = var_temp_num.get(id);
            
         }
         else if(param_temp_num.containsKey(id)){
            TT_num = param_temp_num.get(id);
         }
         else {
            if((var_off.get(currentClass)).containsKey((String)id)) {
               int class_var_temp = (var_off.get(currentClass)).get((String)id);
               System.out.println("HLOAD TEMP " + expr + " TEMP 0 " + class_var_temp);
               TT_num = expr;
               expr++;
            }
         }
         ExpReturn off = (ExpReturn) n.f2.accept(this, argu);
         //System.out.println("--------------");
         ExpReturn to_be_assn = (ExpReturn) n.f5.accept(this, argu);
         System.out.println("MOVE TEMP " + constants +" TEMP " + TT_num);
         System.out.println("MOVE TEMP " + (constants+1) + " PLUS 1 TEMP " + off.temp_num);
         System.out.println("MOVE TEMP " + (constants+2) + " TIMES 4 TEMP " + (constants+1));
         System.out.println("MOVE TEMP " + (constants + 3) + " PLUS TEMP " + (constants) + " TEMP " + (constants + 2));
         System.out.println("HSTORE TEMP " + (constants + 3) + " 0 TEMP " + to_be_assn.temp_num);
         ExpReturn arrayA = new ExpReturn();
         arrayA.temp_num = TT_num;
         constants+=4;
         _ret = (R) arrayA;
      }
      
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 2) {
         int label1 = label;
         label ++;
         ExpReturn pred = (ExpReturn) n.f2.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " TEMP " + pred.temp_num);
         System.out.println("CJUMP TEMP " + constants + " L" + label1);
         n.f4.accept(this, argu);
         System.out.println("L" + label1 + " NOOP");
         constants++;
         
      }
      else {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      else {
         //System.out.println("------------");
         int label1 = label, label2 = label +1 ;
         label += 2;
         ExpReturn pred = (ExpReturn) n.f2.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " TEMP " + pred.temp_num);
         System.out.println("CJUMP TEMP " + constants + " L"+label1);
         n.f4.accept(this, argu);
         System.out.println("JUMP L" + label2);
         System.out.println("L" + (label1) + " NOOP");
         n.f6.accept(this, argu);
         System.out.println("L" + (label2) + " NOOP");
         constants++;
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else {
         int label1 = label, label2 = label+1;
         label +=2;
         System.out.println("L" + label1 + " NOOP");
         ExpReturn exp = (ExpReturn) n.f2.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " TEMP " + exp.temp_num);
         System.out.println("CJUMP TEMP " + constants + " L" + label2);
         n.f4.accept(this, argu);
         System.out.println("JUMP L" + label1);
         System.out.println("L" + (label2) + " NOOP");
         constants++;
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         ExpReturn exp = (ExpReturn) n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " TEMP " + exp.temp_num);
         System.out.println("PRINT TEMP " + constants);
         constants++;
      }
      
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) n.f0.accept(this,argu);
      else  {
         _ret = (R) n.f0.accept(this, argu);
         //System.out.println(((ExpReturn)_ret).value);
         
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);   
      }
      else {
         int label1 = label,label2 = label+1;
         label +=2;
         ExpReturn bool1 = (ExpReturn) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         ExpReturn bool2 = (ExpReturn) n.f2.accept(this, argu);
         System.out.println("MOVE TEMP " + expr + " TEMP " + bool1.temp_num);
         System.out.println("MOVE TEMP " + (expr + 1) + " TEMP " + bool2.temp_num);
         System.out.println("CJUMP TEMP " + expr + " L" + label1);
         System.out.println("MOVE TEMP " + (expr + 2) + " TEMP " + (expr + 1));
         
         System.out.println("JUMP L" + (label2));
         System.out.println("L" + label1 + " NOOP");
         System.out.println("MOVE TEMP " + (expr + 2) + " TEMP " + expr);
         System.out.println("JUMP L" + (label2));
         System.out.println("L" +(label2) + " NOOP"); 
         ExpReturn ele = new ExpReturn();
         ele.temp_num = expr+2;
         ele.type = "boolean";
         _ret = (R) ele;
         expr += 3; 
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         int label1 = label, label2 = label+1;
         label +=2;
         ExpReturn bool1 = (ExpReturn) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         ExpReturn bool2 = (ExpReturn) n.f2.accept(this, argu);

         System.out.println("MOVE TEMP " + expr + " TEMP " + bool1.temp_num);
         System.out.println("CJUMP NE TEMP " + expr + " 1 L" + label1);
         System.out.println("MOVE TEMP " + (expr + 1) + " TEMP " + bool2.temp_num);
         System.out.println("MOVE TEMP " + (expr+2) + " TEMP " + (expr + 1));
         System.out.println("JUMP L" + (label2));
         System.out.println("L" + label1 + " NOOP");
         System.out.println("MOVE TEMP " + (expr + 2) + " TEMP " + expr);
         System.out.println("JUMP L" + (label2));
         System.out.println("L" + (label2) + " NOOP");
         ExpReturn ele = new ExpReturn();
         ele.temp_num = expr+2;
         ele.type = "boolean";
         _ret = (R) ele;
         expr += 3;
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         ExpReturn temp1 = (ExpReturn) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         ExpReturn temp2 = (ExpReturn) n.f2.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " TEMP " + temp1.temp_num);
         System.out.println("MOVE TEMP " + (constants+1) + " TEMP " + temp2.temp_num);
         System.out.println("MOVE TEMP " + expr + " LE TEMP " + constants + " TEMP " + (constants+1));
         ExpReturn ele = new ExpReturn();
         ele.type = "boolean";
         ele.temp_num = expr;
         _ret = (R) ele;
         expr++;
         constants +=2;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         ExpReturn temp1 = (ExpReturn) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         ExpReturn temp2 = (ExpReturn) n.f2.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " TEMP " + temp1.temp_num);
         System.out.println("MOVE TEMP " + (constants+1) + " TEMP " + temp2.temp_num);
         System.out.println("MOVE TEMP " + expr + " NE TEMP " + constants + " TEMP " + (constants+1));
         ExpReturn ele = new ExpReturn();
         ele.type = "boolean";
         ele.temp_num = expr;
         _ret = (R) ele;
         expr++;
         constants +=2;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         ExpReturn temp1 = (ExpReturn) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         ExpReturn temp2 = (ExpReturn) n.f2.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " TEMP " + temp1.temp_num);
         System.out.println("MOVE TEMP " + (constants+1) + " TEMP " + temp2.temp_num);
         System.out.println("MOVE TEMP " + expr + " PLUS TEMP " + constants + " TEMP " + (constants+1));
         ExpReturn ele = new ExpReturn();
         ele.type = "boolean";
         ele.temp_num = expr;
         _ret = (R) ele;
         expr++;
         constants += 2;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         ExpReturn temp1 = (ExpReturn) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         ExpReturn temp2 = (ExpReturn) n.f2.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " TEMP " + temp1.temp_num);
         System.out.println("MOVE TEMP " + (constants+1) + " TEMP " + temp2.temp_num);
         System.out.println("MOVE TEMP " + expr + " MINUS TEMP " + constants + " TEMP " + (constants+1));
         ExpReturn ele = new ExpReturn();
         ele.type = "boolean";
         ele.temp_num = expr;
         _ret = (R) ele;
         expr++;
         constants+=2;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         ExpReturn temp1 = (ExpReturn) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         ExpReturn temp2 = (ExpReturn) n.f2.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " TEMP " + temp1.temp_num);
         System.out.println("MOVE TEMP " + (constants+1) + " TEMP " + temp2.temp_num);
         System.out.println("MOVE TEMP " + expr + " TIMES TEMP " + constants + " TEMP " + (constants+1));
         ExpReturn ele = new ExpReturn();
         ele.type = "boolean";
         ele.temp_num = expr;
         _ret = (R) ele;
         expr++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else {
         ExpReturn temp1 = (ExpReturn) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         ExpReturn temp2 = (ExpReturn) n.f2.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " TEMP " + temp1.temp_num);
         System.out.println("MOVE TEMP " + (constants+1) + " TEMP " + temp2.temp_num);
         System.out.println("MOVE TEMP " + expr + " DIV TEMP " + constants + " TEMP " + (constants+1));
         ExpReturn ele = new ExpReturn();
         ele.type = "boolean";
         ele.temp_num = expr;
         _ret = (R) ele;
         expr++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      else {
         ExpReturn look = new ExpReturn();
         look.type = "int";
         ExpReturn name = (ExpReturn) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         ExpReturn len = (ExpReturn) n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " TEMP " + len.temp_num);
         System.out.println("MOVE TEMP " + (constants+1) + " PLUS 1 TEMP " + constants);
         System.out.println("MOVE TEMP " + (constants + 2) + " TIMES 4 TEMP " + (constants + 1));
         System.out.println("MOVE TEMP " + (constants + 3) + " PLUS TEMP " + name.temp_num + " TEMP " + (constants + 2));
         System.out.println("HLOAD TEMP " + expr + " TEMP " + (constants + 3) + " 0");
         look.temp_num = expr;
         expr++;
         constants += 4;
         _ret = (R) look;
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      //n.f2.accept(this, argu);   
      }
      else {
         ExpReturn exp = (ExpReturn) n.f0.accept(this, argu);
         System.out.println("MOVE TEMP " + expr + " TEMP " + exp.temp_num);
         System.out.println("HLOAD TEMP " + (expr + 1) + " TEMP " + expr + " 0");
         ExpReturn len = new ExpReturn();
         len.type = "int";
         len.temp_num = expr+1;
         expr +=2;
         _ret =(R) len;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
      }
      else {
         ExpReturn return_type = new ExpReturn();
         ExpReturn class_call = (ExpReturn) n.f0.accept(this, argu);
         String class_name = class_call.type; 
         //System.out.println("CLASS : " + class_name);
         String function_name_temp = (String) n.f2.accept(this, argu);
         String function_name = class_name + "_" + function_name_temp;
         expr_list.clear();
         n.f4.accept(this, argu);
         // System.out.println("---aa----");
         System.out.println("MOVE TEMP " + currentTemp + " TEMP " + class_call.temp_num);
         System.out.println("HLOAD TEMP " + (currentTemp + 1) + " TEMP "+ currentTemp + " 0");
         int method_off = 6969;
         // System.out.println("-------- CLASS : " + class_name);
         // System.out.println("--------METHOD : " + function_name);
         String CNN = class_name;
         while(CNN != null){
            String MN = CNN + '_' + function_name_temp;
            if(func_off.get(class_name).containsKey(MN)){
               method_off = func_off.get(class_name).get(MN);
               break;
            }
            else{
               CNN = class_parent.get(CNN);
            }
         }
         System.out.println("HLOAD TEMP " + (currentTemp + 2) + " TEMP " + (currentTemp + 1) + " " + method_off);
         int [] A = new int[expr_list.size()];
         for(int i = 0;i<expr_list.size();i++){
            System.out.println("MOVE TEMP " + expr + " TEMP " + ((ExpReturn)expr_list.get(i)).temp_num);
            A[i] = expr;
            expr++;
         }
         System.out.print("MOVE TEMP " + (currentTemp + 3) + " CALL TEMP " + (currentTemp + 2) + " ( TEMP " + currentTemp);
         for(int i = 0;i<expr_list.size(); i++) {
            System.out.print(" TEMP " + A[i]);
         }
         System.out.println(" )");
         //System.out.println("CALL ")
         //System.out.println(expr_list.size());
         return_type.temp_num = currentTemp + 3;
         return_type.type = met_fin_return.get(class_name).get(function_name);
         currentTemp += 4;
         _ret = (R) return_type;      
      }
      return _ret;
   }

   public Vector<R> expr_list = new Vector<R>();

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f1.accept(this, argu);
      }
      else {
         ExpReturn exp = (ExpReturn) n.f0.accept(this, argu);
         expr_list.add((R)exp);
         n.f1.accept(this,argu);
      }
      
      
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);   
      }
      else {
         n.f0.accept(this, argu);
         ExpReturn exp = (ExpReturn) n.f1.accept(this, argu);
         _ret = (R) exp;
         expr_list.add((R)exp);
      }
      
       return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */
      String CN = null;
      ExpReturn pr_exp = new ExpReturn();
      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
      }
      else {
         
         R id = n.f0.accept(this, argu);
         _ret = (R) id;
         int pr_type = n.f0.which;
         if(pr_type == 4) {
            CN = (String) argu;
            pr_exp.type = CN;
            return (R) pr_exp;
         }
         if(pr_type == 3) {
            CN = (String) argu;
            if(var_temp_num.containsKey((String)id)) {
            
               int var_temp_f = var_temp_num.get(id);
               pr_exp.temp_num = var_temp_f;
               pr_exp.type = (met_fin_var.get(currentClass).get(currentMethod)).get(id);
            }
            else if(param_temp_num.containsKey((String)id)) {
               int param_temp_f = param_temp_num.get(id);
               pr_exp.temp_num = param_temp_f;
               pr_exp.type = (met_fin.get(currentClass).get(currentMethod)).get(id);
            }
            else {
               if((var_off.get(CN)).containsKey((String)id)) {
                  int class_var_temp = (var_off.get(CN)).get((String)id);
                  System.out.println("HLOAD TEMP " + expr + " TEMP 0 " + class_var_temp);
                  pr_exp.temp_num = expr;
                  pr_exp.type = class_fin_var.get(currentClass).get(id);
                  expr++;
               }
            
            }
            return (R) pr_exp;
         }
      }
      
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */
      R _ret = null;
      if(pass == 1) n.f0.accept(this,argu);
      else {
         String num = (String) n.f0.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " " + num);
         ExpReturn ele = new ExpReturn();
         ele.type = "int";
         ele.temp_num = constants;
         _ret = (R) ele;
         constants++;
      }
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) n.f0.accept(this, argu);
      else {
         String num = (String) n.f0.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " " + 1);
         ExpReturn ele = new ExpReturn();
         ele.type = "boolean";
         ele.temp_num = constants;
         _ret = (R) ele;
         constants++;
      }
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) n.f0.accept(this, argu);
      else {
         String num = (String) n.f0.accept(this, argu);
         System.out.println("MOVE TEMP " + constants + " " + 0);
         ExpReturn ele = new ExpReturn();
         ele.type = "boolean";
         ele.temp_num = constants;
         _ret = (R) ele;
         constants++;
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = n.f0.accept(this,argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */
      //if(pass == 2) System.out.println("--------------");
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);   
      }
      else {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         ExpReturn exp = (ExpReturn) n.f3.accept(this, argu);
         n.f4.accept(this, argu);   

         System.out.println("MOVE TEMP " + constants + " TEMP " + exp.temp_num);
         System.out.println("MOVE TEMP " + (constants + 1) + " PLUS TEMP " + constants + " 1");
         System.out.println("MOVE TEMP " + (constants + 2) + " TIMES TEMP " + (constants+1) + " 4");
         System.out.println("MOVE TEMP " + expr + " HALLOCATE TEMP " + (constants+2));
         System.out.println("HSTORE TEMP " + expr + " 0 TEMP " + constants);
         System.out.println("MOVE TEMP " + (constants + 4) + " 4");
         System.out.println("MOVE TEMP " + (constants + 5) + " MINUS TEMP " + (constants + 2) + " 1");
         System.out.println("L" + label + " NOOP");
         System.out.println("CJUMP LE TEMP " + (constants + 4) + " TEMP " + (constants + 5) + " L" + (label + 1));
         System.out.println("MOVE TEMP " + (constants + 6) + " PLUS TEMP " + expr + " TEMP " + (constants + 4));
         System.out.println("HSTORE TEMP " + (constants + 6) + " 0 0");
         System.out.println("MOVE TEMP " + (constants + 7) + " PLUS 4 TEMP " + (constants + 4));
         System.out.println("MOVE TEMP " + (constants + 4) + " TEMP " + (constants + 7));
         System.out.println("JUMP L" + label);
         System.out.println("L" + (label + 1) + " NOOP");
         ExpReturn array_exp = new ExpReturn();
         array_exp.temp_num = expr;
         array_exp.type = "int[]";
         constants += 8;
         expr++;
         label += 2;
         _ret = (R) array_exp;
      }
      
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      else {
         n.f0.accept(this, argu);
         String CN = (String) n.f1.accept(this, argu);
         int func_table_off = class_func.get(CN).size();
         int var_table_off = class_var.get(CN).size();
         System.out.println("MOVE TEMP " + constants + " " + 4*(var_table_off + 1));
         System.out.println("MOVE TEMP " + currentTemp + " HALLOCATE TEMP " + constants);
         System.out.println("MOVE TEMP " + (constants + 1) + " " + 4*(func_table_off));
         System.out.println("MOVE TEMP " + (currentTemp+1) + " HALLOCATE TEMP " + (constants+1));
         constants += 2;
         Vector<String> fun = class_func.get(CN);
         Enumeration enu = fun.elements();
         while(enu.hasMoreElements()) {
            String met_name = (String) enu.nextElement();
            int this_off = (func_off.get(CN)).get(met_name); 
            System.out.println("MOVE TEMP " + constants + " " + met_name); 
            System.out.println("HSTORE TEMP " + (currentTemp + 1) + " " + this_off + " TEMP " + constants);
            constants++;
         }
         fun = class_var.get(CN);
         enu = fun.elements();
         while(enu.hasMoreElements()) {
            String var_name = (String) enu.nextElement();
            int this_off = (var_off.get(CN)).get(var_name);
            System.out.println("HSTORE TEMP " + (currentTemp) + " " + this_off + " 0");
         }
         System.out.println("HSTORE TEMP " + (currentTemp) + " 0 TEMP " + (currentTemp + 1));
         System.out.println("MOVE TEMP " + (currentTemp + 2) + " TEMP " + (currentTemp));
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);

         ExpReturn ele = new ExpReturn();
         ele.type = CN;
         ele.temp_num = currentTemp + 2;
         currentTemp += 3;
         _ret = (R) ele;
      }
      
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);   
      }
      else {
         int label1 = label, label2 = label+1;
         label += 2;
         n.f0.accept(this, argu);
         ExpReturn exp = (ExpReturn) n.f1.accept(this, argu);
         ExpReturn new_exp = new ExpReturn();
         new_exp.type = "boolean";
         System.out.println("CJUMP TEMP " + exp.temp_num + " L" + label1);
         System.out.println("MOVE TEMP " + expr + " 0");
         System.out.println("JUMP L" + (label2));
         System.out.println("L" + label1 + " NOOP");
         System.out.println("MOVE TEMP " + expr + " 1");
         System.out.println("JUMP L" + (label2));
         System.out.println("L" + (label2) + " NOOP");
         new_exp.temp_num = expr;
         _ret = (R) new_exp;
         expr ++;
      }
      
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}