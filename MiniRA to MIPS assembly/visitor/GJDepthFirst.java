//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.awt.Stroke;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	String destReg;
	int inArgs, outArgs;
	boolean printLabel;
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   class type_exp {
      String value;
      int type;
      int number;

      type_exp(){
         value = "";
         type = number = -1;
      }

      type_exp(String v, int t){
         this.value = v;
         this.type = t;
      }
   }

   public void procStart(String label) {
      System.out.println("\t\t .text");
      System.out.println("\t\t .globl \t\t  " + label);
      System.out.println(label + ":");
   }

   public void procStackStore() {
      System.out.println("\t\t sw $fp, -8($sp)");
      System.out.println("\t\t sw $ra, -4($sp)");
      System.out.println("\t\t move $fp, $sp");
   }

   public void procStackLoad() {
      System.out.println("\t\t lw $ra, -4($fp)");
      System.out.println("\t\t lw $fp, -8($fp)");
      System.out.println("\t\t jr $ra");
   }

   public void printEnd(){
      System.out.println("\t\t .text");
      System.out.println("\t\t .globl _halloc");
      System.out.println("_halloc:");
      System.out.println("\t\t li $v0, 9");
      System.out.println("\t\t syscall");
      System.out.println("\t\t jr $ra");
      System.out.println("");
      System.out.println("\t\t .text");
      System.out.println("\t\t .globl _print");
      System.out.println("");
      System.out.println("_print:");
      System.out.println("\t\t li $v0, 1");
      System.out.println("\t\t syscall");
      System.out.println("\t\t la $a0, newl");
      System.out.println("\t\t li $v0, 4");
      System.out.println("\t\t syscall");
      System.out.println("\t\t jr $ra");
      System.out.println("");
      System.out.println("\t\t .text ");
      System.out.println("\t\t .globl _exitret");
      System.out.println("_exitret:");
      System.out.println("\t\t li $v0, 10");
      System.out.println("\t\t syscall");
      System.out.println("");
      System.out.println("\t\t .data");
      System.out.println("\t\t .align  0");
      System.out.println("newl:");
      System.out.println("\t\t .asciiz \"\\n\" ");
      System.out.println("\t\t .data");
      System.out.println("\t\t .align 0");
      System.out.println("str_ez:  .asciiz \" ERROR: abnormal termination\\n \"");
      System.out.println("");
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      procStart("main");
      
      System.out.println("\t\t move $fp, $sp");
      System.out.println("\t\t sw $ra, -4($sp)");  

      String num_arg = (String) n.f2.accept(this, argu);
      String spill_arg = (String) n.f5.accept(this, argu);
      String max_arg = (String) n.f8.accept(this, argu);
      int temp = (2 + Integer.parseInt(spill_arg)) * 4; 

      System.out.println("\t\t subu $sp, $sp, " + temp);
      n.f10.accept(this, argu);
      System.out.println("\t\t addu $sp, $sp, " + temp);
      System.out.println("\t\t lw $ra, -4($fp)");
      System.out.println("\t\t jal _exitret");
      n.f13.accept(this, argu);

      printEnd();

      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      printLabel = true;
      n.f0.accept(this, argu);
      printLabel = false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      System.out.println();
      String label = (String) n.f0.accept(this, argu);
      procStart(label);
      String num_arg = (String) n.f2.accept(this, argu);
      String spill_arg = (String) n.f5.accept(this, argu);
      String max_arg = (String) n.f8.accept(this, argu);
      int temp = (2 + Integer.parseInt(spill_arg)) * 4; 
      procStackStore();
      System.out.println("\t\t subu $sp, $sp, " + temp);   
      n.f10.accept(this, argu);   
      System.out.println("\t\t addu $sp, $sp, " + temp);  
      procStackLoad();
      System.out.println();
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      printLabel = false;
      n.f0.accept(this, argu);
      printLabel = true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      System.out.println("\t\t nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      String register = (String) n.f1.accept(this, argu);
      System.out.print("\t\t beqz $" + register + ", ");
      String label = (String) n.f2.accept(this, argu);
      System.out.println(label);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      String label = (String) n.f1.accept(this, argu);
      System.out.println("\t\t b " + label);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      String dest = (String) n.f1.accept(this, argu);
      String offset = (String) n.f2.accept(this, argu);
      String source = (String) n.f3.accept(this, argu);
      int int_off = Integer.parseInt(offset);
      System.out.println("\t\t sw $" + source + ", " + int_off + "($" + dest + ")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      String dest = (String) n.f1.accept(this, argu);
      String source = (String) n.f2.accept(this, argu);
      String offset = (String) n.f3.accept(this, argu);
      int int_off = Integer.parseInt(offset);
      System.out.println("\t\t lw $" + dest + ", " + int_off + "($" + source + ")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      String register = (String) n.f1.accept(this, argu); 
      destReg = register;
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      type_exp tt = (type_exp) n.f1.accept(this, argu);
      int exp_type = tt.type;
      String exp_value = tt.value;

      switch(exp_type) {
         case 0 : System.out.println("\t\t move $a0, $" + exp_value);
                  break;

         default : System.out.println("\t\t li $a0, " + exp_value);
                  break; 
      }
      System.out.println("\t\t jal _print");
      
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      String register = (String) n.f1.accept(this, argu);
      System.out.print("\t\t lw $" + register + ", -");
      n.f2.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      String register = (String) n.f2.accept(this, argu);
      System.out.print("\t\t sw $" + register + ", -");
      n.f1.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      String temp = (String) n.f1.accept(this, argu);
      int i = 4* (Integer.parseInt(temp) + 2);
      String register = (String) n.f2.accept(this, argu);
      System.out.print("\t\t sw $" + register + ", -");
      System.out.println(i + "($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      type_exp tt = (type_exp) n.f1.accept(this, argu);
      int sim_exp_type = tt.type;
      String sim_exp_value = tt.value;

      if(sim_exp_type == 0) {
         System.out.println("\t\t jalr $" + sim_exp_value);
      }

      if(sim_exp_type == 2) {
         System.out.println("\t\t jal " + sim_exp_value);
      }
      
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      type_exp tt = (type_exp) n.f0.accept(this, argu);

      if(n.f0.which == 2) {
         int expr_type = tt.type;
         String expr_value = tt.value;
         switch (expr_type) {
            case 1 : System.out.println("\t\t li $" + destReg+ ", " + expr_value);
                     break;

            case 2 : System.out.println("\t\t la $" + destReg + ", " + expr_value);
                     break;

            case 0 : System.out.println("\t\t move $"+ destReg + ", $" + expr_value);
                     break;
         }
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      type_exp sim_exp = (type_exp) n.f1.accept(this, null);
      int sim_exp_type = sim_exp.type;
      String sim_exp_value = sim_exp.value;  

      switch (sim_exp_type) {
         case 0 : System.out.println("\t\t move $a0, $" + sim_exp_value);
                  break;

         case 1 : System.out.println("\t\t li $v1, " + sim_exp_value);
                  System.out.println("\t\t move $a0, $v1");
                  break;

      }
      System.out.println("\t\t jal _halloc");
      System.out.println("\t\t move $" + destReg + ", $v0");
      _ret = (R) new type_exp();
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp() 
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      type_exp op = (type_exp) n.f0.accept(this, argu);
      String reg = (String) n.f1.accept(this, argu);
      type_exp exp = (type_exp) n.f2.accept(this, null);
      int sim_exp_type = exp.type;
      String sim_exp_val = exp.value;
      if(sim_exp_type == 1) {
         System.out.println("\t\t li $v1, " + sim_exp_val);
         sim_exp_val = "v1";
      }

      int op_type = op.type;

      switch (op_type) {
         case 0 : System.out.println("\t\t sle $" + destReg + ", $" + reg + ", $" + sim_exp_val);
                  break;

         case 5 : System.out.println("\t\t div $" + reg + ", $" + sim_exp_val);
                  System.out.println("\t\t mflo $" + destReg);
                  break;

         case 1 : System.out.println("\t\t sne $" + destReg + ", $" + reg + ", $" + sim_exp_val);
                  break;

         case 4 : System.out.println("\t\t mult $" + reg + ", $" + sim_exp_val);
                  System.out.println("\t\t mflo $" + destReg);
                  break;

         case 2 : System.out.println("\t\t add $" + destReg + ", $" + reg + ", $" + sim_exp_val);
                  break;

         case 3 : System.out.println("\t\t sub $" + destReg + ", $" + reg + ", $" + sim_exp_val);
                  break;

      }
      _ret = (R) new type_exp();
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      String op = (String) n.f0.accept(this, argu);
      _ret = (R) new type_exp(op, n.f0.which);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      String ss = (String) n.f1.accept(this, argu);
      int il = Integer.parseInt(ss);
      il = (il+3)*4;
      System.out.println(il + "($fp)");
      return _ret;
      
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;

      String temp =(String) n.f0.accept(this, argu);
      _ret =(R) new type_exp(temp, n.f0.which);
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      if(printLabel) System.out.println((String) _ret + ": ");
      return _ret;
      
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
