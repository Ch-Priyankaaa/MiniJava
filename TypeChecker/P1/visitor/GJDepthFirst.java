//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class GJDepthFirst<R,A> implements GJVisitor<R,A> {

   public HashMap<String,String> method_variables__ = new HashMap<String,String>();
   String currentClass = null;
   String currentMethod = null;
   boolean TypeCheck = false;
   int count = 0;

   public class MethodTable {
      
      String return_type;
      HashMap<String,String> method_variables;
      HashMap<String,String> method_parameters;

      MethodTable(){
         
         this.return_type = null;
         this.method_variables = new HashMap<String,String>();
         this.method_parameters = new HashMap<String,String>();
      }
   }

   public class Table {
      String parent;
      HashMap<String,String> class_variables;
      HashMap<String, MethodTable>class_methods;

      Table(){
         this.parent = null;
         this.class_variables =  new HashMap<String,String>();
         this.class_methods = new HashMap<String, MethodTable>();
      }
   }

   HashMap <String, Table> symbolTable=new HashMap<String, Table>();

public void printVarTable() {
  Iterator<Map.Entry<String, Table>> itr = symbolTable.entrySet().iterator();
  Map.Entry<String,Table> entry = null;
  while(itr.hasNext()){
      entry = itr.next();
      System.out.println("******************************************************");
      System.out.println("ClassName = " + entry.getKey() + "Parent Name = " + entry.getValue().parent);
      System.out.println();
      System.out.println("Printing Class variables");
      Iterator<Map.Entry<String, String>> itr2= (entry.getValue().class_variables).entrySet().iterator();
      Map.Entry<String,String> vars = null;
      while(itr2.hasNext()){
         vars = itr2.next();
         System.out.println( vars.getKey() + "->" + vars.getValue());
      }
      System.out.println();
      System.out.println("Printing Methods Table");
      Iterator<Map.Entry<String, MethodTable>> itr3= (entry.getValue().class_methods).entrySet().iterator();
      Map.Entry<String,MethodTable> met = null;
      while(itr3.hasNext()) {
         met = itr3.next();
         System.out.println("Method Name : " + met.getKey());
         System.out.println("return type : " + met.getValue().return_type);
         System.out.println();

         System.out.println("Printing Method variables");
         Iterator<Map.Entry<String, String>> itr4= (met.getValue().method_variables).entrySet().iterator();
         Map.Entry<String,String> metVV = null;
         while(itr4.hasNext()) {
            metVV = itr4.next();
            System.out.println( metVV.getKey() + "->" + metVV.getValue());
         }

         System.out.println("Printing Method parameters");
         Iterator<Map.Entry<String, String>> itr5= (met.getValue().method_parameters).entrySet().iterator();
         Map.Entry<String,String> metV = null;
         while(itr5.hasNext()) {
            metV = itr5.next();
            System.out.println( metV.getKey() + "->" + metV.getValue());
         }
      }

  }

}

public void printVar() {
   System.out.println("************************heree***********************");
   Iterator<Map.Entry<String, String>> itr = method_variables__.entrySet().iterator();
  Map.Entry<String,String> entry = null;
  while(itr.hasNext()){
      entry = itr.next();
      System.out.println( entry.getKey() + "->" + entry.getValue());
  }
}

public void printMethod() {
   System.out.println("************************heree***********************");
   Iterator<Map.Entry<String, String>> itr = method_variables__.entrySet().iterator();
  Map.Entry<String,String> entry = null;
  while(itr.hasNext()){
      entry = itr.next();
      System.out.println( entry.getKey() + "->" + entry.getValue());
  }
}

// public  boolean checkUniqueVar(String className , String type, String var_name) {
//    Table TT = symbolTable.get(className);
// }
	
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      //printVarTable();

      TypeCheck = true;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      System.out.println("Program type checked successfully");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */
R _ret=null;
      if(TypeCheck == false ){
         
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */
      String class_name = null;
      R _ret=null;
      if(TypeCheck == false) {
         Table classTable = new Table();
         argu = (A) classTable;

         //R _ret=null;
         n.f0.accept(this, argu);
         class_name = (String) n.f1.accept(this, argu);
         n.f2.accept(this,argu);
         n.f3.accept(this, argu);
         // System.out.println("Class variables");
         // printVar();
         // System.out.println("done here\n");
         ((Table)argu).class_variables.putAll(method_variables__);
         method_variables__.clear();
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         symbolTable.put(class_name, (Table)argu);
         method_variables__.clear();
      }
            
      if(TypeCheck) {
         Table classTable = new Table();
         argu = (A) classTable;
         n.f0.accept(this, argu);
         A temp_arg = argu;
         argu = (A) "class_name";
         n.f1.accept(this, argu);
         argu = temp_arg;
         n.f2.accept(this,argu);
         n.f3.accept(this, argu);
         //System.out.println("----------------" + currentClass);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         //symbolTable.put(class_name, (Table)argu);
         //method_variables__.clear();
      }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      Table classTable = new Table();
      argu = (A) classTable;

      R _ret=null;
      n.f0.accept(this, argu);
      String class_name = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String parent_name = (String) n.f3.accept(this, argu);
      classTable.parent = parent_name;
      n.f4.accept(this, argu);
      method_variables__.clear();
      n.f5.accept(this, argu);
      method_variables__.clear();
      ((Table)argu).class_variables.putAll(method_variables__);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      symbolTable.put(class_name, (Table)argu);
      method_variables__.clear();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */
      //if(method_variables__.isEmpty()) System.out.println("-kfhsafhkaslhflkas"); 
      R _ret=null;
      String varType = (String)n.f0.accept(this, argu);
      String varName = (String)n.f1.accept(this, argu);
      //System.out.println(varType + "------" + varName);
      n.f2.accept(this, argu);
      method_variables__.put(varName , varType);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */
      if(TypeCheck == false)  {
         MethodTable methods = new MethodTable();
         R _ret=null;
         n.f0.accept(this, argu);
         String ret_ty = (String) n.f1.accept(this, argu);
         methods.return_type = ret_ty;
         String method_name = (String) n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         method_variables__.clear();
         n.f4.accept(this, argu);
         if(method_variables__.isEmpty() == false) methods.method_parameters.putAll(method_variables__);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         method_variables__.clear();
         n.f7.accept(this, argu);
         //System.out.println("Method variables");
         methods.method_variables.putAll(method_variables__);
         //printVar();
         (((Table)argu).class_methods).put(method_name,methods);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         return _ret;
      }
      else  {
         //MethodTable methods = new MethodTable();
         A temp_arg = argu;
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         //methods.return_type = ret_ty;
         argu = (A) "method_name";
         n.f2.accept(this, argu);
         //currentMethod = method_name;
         argu = temp_arg;
         n.f3.accept(this, argu);
         //method_variables__.clear();
         n.f4.accept(this, argu);
         //if(method_variables__.isEmpty() == false) methods.method_parameters.putAll(method_variables__);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         //method_variables__.clear();
         n.f7.accept(this, argu);
         //System.out.println("Method variables");
         //methods.method_variables.putAll(method_variables__);
         //printVar();
         //(((Table)argu).class_methods).put(method_name,methods);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         return _ret;   
      }
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String varType = (String)n.f0.accept(this, argu);
      String varName = (String)n.f1.accept(this, argu);
      method_variables__.put(varName , varType);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      A arg_temp = argu;
      argu = (A) "arr_type";
      _ret = n.f0.accept(this, argu);
      argu = arg_temp;
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R) "Array";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(TypeCheck == false) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);   
      }
      else {
         String type1 = (String) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String type2 = (String) n.f2.accept(this, argu);

         if(type1 == "boolean" && type2 == "boolean") {
            _ret = (R) "boolean";
         }
         else {
            System.out.println("Type Error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(TypeCheck == false) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);   
      }
      else {
         String type1 = (String) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String type2 = (String) n.f2.accept(this, argu);

         if(type1 == "boolean" && type2 == "boolean") {
            _ret = (R) "boolean";
         }
         else {
            System.out.println("Type Error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(TypeCheck == false) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);   
      }
      else {
         String type1 = (String) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String type2 = (String) n.f2.accept(this, argu);

         if(type1 == "int" && type2 == "int") {
            _ret = (R) "boolean";
         }
         else {
            //System.out.println(type1 + " " + type2);
            //System.out.println("ssssType Error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(TypeCheck == false) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);   
      }
      else {
         String type1 = (String) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String type2 = (String) n.f2.accept(this, argu);

         if(type1 == type2) {
            _ret = (R) "boolean";
         }
         else {
            System.out.println("Type Error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(TypeCheck == false) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);   
      }
      else {
         String type1 = (String) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String type2 = (String) n.f2.accept(this, argu);

         if(type1 == "int" && type2 == "int") {
            _ret = (R) "boolean";
         }
         else {
            System.out.println("Type Error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(TypeCheck == false) {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);   
      }
      else {
         String type1 = (String) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String type2 = (String) n.f2.accept(this, argu);

         if(type1 == "int" && type2 == "int") {
            _ret = (R) "boolean";
         }
         else {
            System.out.println("Type Error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(TypeCheck == true) {
         argu = (A) "primary_expression";
         //if(argu == "primary_expression") System.out.println("biatch");
         _ret = (R)n.f0.accept(this, argu);
         argu = null;
         //if(argu == "primary_expression") System.out.println("biaaaaatch");
      }
      else {
         n.f0.accept(this, null);
      }
      
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */
      R _ret=null;
      n.f0.accept(this, argu);
      if(TypeCheck) {
         _ret = (R) "int";
         //System.out.println(_ret);
      }
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      if(TypeCheck ) _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      if(TypeCheck) _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String id = (String) n.f0.accept(this,argu);
      if(TypeCheck == false) _ret = (R) id;
      else {
         count ++;
         //System.out.println("reached Id " + count + " ID : " + id);
         if(argu == "class_name") {
            currentClass = id;
            //System.out.println("Factoooo");
            return _ret;
         }
         else if(argu == "method_name") {
            currentMethod = id;
            return _ret;
         }
         else if(argu == "primary_expression") {
            //System.out.println("Id : " + id + " -----> ClassName : "+ currentClass);
            if(currentClass != null) {
               Table TT = symbolTable.get(currentClass);
               Iterator<Map.Entry<String, String>> var_s= (TT.class_variables).entrySet().iterator();
               Map.Entry<String,String> CV = null;
               //if(var_s.hasNext() == false) System.out.println("++++++++++++++");
               while(var_s.hasNext()) {
                  CV = var_s.next();
                  if(CV.getKey() == id) {
                     _ret = (R) CV.getValue();
                     break;
                  }
               }
               if(_ret == null) {
                  if(currentMethod == null) {
                     System.out.println("Type error");
                     System.exit(0);
                  }
                  MethodTable M = (TT.class_methods).get(currentMethod);
                  Iterator<Map.Entry<String, String>> var_MV= (M.method_variables).entrySet().iterator();
                  Map.Entry<String,String> CV2 = null;
                  //if(var_s.hasNext() == false) System.out.println("++++++++++++++");
                  while(var_MV.hasNext()) {
                     CV2 = var_MV.next();
                     if(CV2.getKey() == id) {
                        _ret = (R) CV2.getValue();
                        break;
                     }
                  }
                  if(_ret == null) {
                     Iterator<Map.Entry<String, String>> var_MP= (M.method_parameters).entrySet().iterator();
                  Map.Entry<String,String> CV3 = null;
                  //if(var_s.hasNext() == false) System.out.println("++++++++++++++");
                  while(var_MP.hasNext()) {
                     CV3 = var_MP.next();
                     if(CV3.getKey() == id) {
                        _ret = (R) CV3.getValue();
                        break;
                     }
                  } 
                     if(_ret == null) {
                        System.out.println(id);
                        System.out.println("Type error");
                        System.exit(0);
                     }
                  }

                  
               }

               // else {
               //    System.out.println("Identifier found ");
               // }
            }
         }
         //if(argu == null) System.out.println("BEGINSSSS");
         
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}